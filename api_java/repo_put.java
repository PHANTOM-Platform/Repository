package demo_phantom;
// This Java Class should return the TOKEN-string generated by the PHANTOM Repository for a specific user_id and user_pw
//
// Author: J.M.Monta√±ana HLRS 2018
// If you find any bug, please notify to hpcjmont@hlrs.de
//
// Copyright (C) 2018 University of Stuttgart
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.DataOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.nio.file.Files;
 
public class repo_put { 
    private static final String LINE_FEED = "\r\n"; 
    private static final String boundary = "*****"; 

    public static void main(String[] args)   throws IOException { 
		int firstArg;
		if (args.length < 6) {
			System.err.println("Missing arguments, please try: \n repo_put token server port destfilepath destfilename srcfile scrjson\n");
			System.exit(1);
		} else{  
			String token			= args[0];
			String es_serveraddress	= args[1];
			String es_serverport	= args[2];	 //project    and source are defined in the json file
			String DestFilePath		= args[3];
			String DestFileName		= args[4];			
			
			String SrcFile= args[5];//"/home/jmontana/repository/web/example.h"
			String SrcJson= args[6];//"/home/jmontana/repository/web/exampleh.json"

			String charset = "UTF-8";
			String destfile="example.h";
			File uploadFile1 = new File(SrcFile);  
			File uploadFile2 = new File(SrcJson);

			String requestURL = "http://"+es_serveraddress+":"+es_serverport+"/upload?Path="+DestFilePath + "&DestFileName="+DestFileName; 
			try {     
				String lineEnd = "\r\n";
				String twoHyphens = "--";
				
				int bytesRead, bytesAvailable, bufferSize;
				byte[] buffer;
				int maxBufferSize = 1 * 1024 * 1024;  
				// open a URL connection to the Servlet
				FileInputStream fileInputStream = new FileInputStream(uploadFile1); 
				// Open a HTTP  connection to  the URL 
				URL url = new URL(requestURL);
				HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
				httpConn.setUseCaches(false);
				httpConn.setDoOutput(true); 
				httpConn.setDoInput(true);   
				httpConn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
				httpConn.setRequestMethod("POST"); 	 
				httpConn.setRequestProperty("Authorization", "OAuth " + token);
				
				OutputStream outputStream = httpConn.getOutputStream();
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream, charset), true);    

				// Send text file.
				writer.append("--" + boundary).append(lineEnd);
				writer.append("Content-Disposition: form-data; name=\"UploadFile\"; filename=\"UploadFile\"").append(lineEnd);
				writer.append("Content-Type: text/plain; charset=" + charset).append(lineEnd); // Text file itself must be saved in this charset!
				writer.append(lineEnd).flush();
				Files.copy(uploadFile1.toPath(), outputStream);
				outputStream.flush(); // Important before continuing with writer!
				writer.append(lineEnd).flush(); // lineEnd is important! It indicates end of boundary.

				// Send binary file.
				writer.append("--" + boundary).append(lineEnd);
				writer.append("Content-Disposition: form-data; name=\"UploadJSON\"; filename=\"UploadJSON\"").append(lineEnd);
			//     writer.append("Content-Type: " + URLConnection.guessContentTypeFromName(uploadFile2)).append(lineEnd);
				writer.append("Content-Type: text/plain; charset=" + charset).append(lineEnd); // Text file itself must be saved in this charset!
			//     writer.append("Content-Transfer-Encoding: binary").append(lineEnd);
				writer.append(lineEnd).flush();
				Files.copy(uploadFile2.toPath(), outputStream);
				outputStream.flush(); // Important before continuing with writer!
				writer.append(lineEnd).flush(); // lineEnd is important! It indicates end of boundary.

				// End of multipart/form-data.
				writer.append("--" + boundary + "--").append(lineEnd).flush();
				int responseCode = ((HttpURLConnection) httpConn).getResponseCode();
				System.out.println(responseCode); // Should be 200    
			} catch (IOException ex) {
				System.err.println(ex);
			}
        }
    }
}
